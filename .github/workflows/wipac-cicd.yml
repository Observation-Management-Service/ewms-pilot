name: wipac ci/cd

on: [push]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PULSAR_CONTAINER: pulsar_local
  EWMS_PILOT_BROKER_ADDRESS: localhost
  EWMS_PILOT_TIMEOUT_INCOMING: 1
  EWMS_PILOT_TIMEOUT_OUTGOING: 1

jobs:

  flake8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
      - uses: WIPACrepo/wipac-dev-flake8-action@v1

  mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: WIPACrepo/wipac-dev-mypy-action@v1.1
      - run: |
          # pulsar will eventually support 3.11
          # so let's set a timer for six months from now:
          echo "How's https://github.com/Observation-Management-Service/MQClient/issues/61 coming along?"
          if [ $(echo "1672874697+(60*60*24*30*6) - $(date +%s)" | bc) -lt 0 ]; then
            exit 1
          fi

  py-setup:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - uses: WIPACrepo/wipac-dev-py-setup-action@v1.11
        with:
          base-keywords: WIPAC IceCube "Observation Management Service" "Event Workflow Managment Service"

  py-versions:
    needs: [py-setup]
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: versions
        uses: WIPACrepo/wipac-dev-py-versions-action@v2

  examples:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        broker_client: [pulsar, rabbitmq, gcp, nats]
    steps:
      - uses: actions/checkout@v3
      - name: Checkout MQClient repo
        uses: actions/checkout@v3
        with:
          repository: Observation-Management-Service/MQClient
          path: MQClient
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: run
        run: |
          set -x

          # Pulsar
          if [ "${{ matrix.broker_client }}" = "pulsar" ]; then
            ./MQClient/resources/docker-pulsar.sh "${{ matrix.broker_client }}"
          # RabbitMQ
          elif [ "${{ matrix.broker_client }}" = "rabbitmq" ]; then
            ./MQClient/resources/docker-rabbitmq.sh "${{ matrix.broker_client }}"
          # GCP
          elif [ "${{ matrix.broker_client }}" = "gcp" ]; then
            export PUBSUB_EMULATOR_HOST=localhost:8085
            ./MQClient/resources/local-gcp-emulator.sh
          # NATS
          elif [ "${{ matrix.broker_client }}" = "nats" ]; then
            ./MQClient/resources/local-nats-js.sh
          fi

          echo "--------------------------------------------------------------"
          echo "running examples..."

          pip install --upgrade pip wheel setuptools pytest
          export EWMS_PILOT_BROKER_CLIENT=${{ matrix.broker_client }}
          pip install .[test,${{ matrix.broker_client }}]
          python examples/example.py
      - name: broker output
        if: always()
        run: |
          set -x
          cat ./broker.out
          if [ -n "$(ls -A ./broker_logs/ 2>/dev/null)" ]; then
            ls ./broker_logs/
            more ./broker_logs/* | cat  # cats with filenames (delimited by :::::::)
          fi
      - name: broker docker logs
        if: always()
        run: |
          docker logs "${{ matrix.broker_client }}" || true

  tests:
    needs: [py-versions]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
        broker_client: [pulsar, rabbitmq, gcp, nats]
    steps:
      - uses: actions/checkout@v3
      - name: Checkout MQClient repo
        uses: actions/checkout@v3
        with:
          repository: Observation-Management-Service/MQClient
          path: MQClient
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.version }}
      - name: Integrate
        run: |
          set -x

          # Pulsar
          if [ "${{ matrix.broker_client }}" = "pulsar" ]; then
            ./MQClient/resources/docker-pulsar.sh "${{ matrix.broker_client }}"
          # RabbitMQ
          elif [ "${{ matrix.broker_client }}" = "rabbitmq" ]; then
            ./MQClient/resources/docker-rabbitmq.sh "${{ matrix.broker_client }}"
          # GCP
          elif [ "${{ matrix.broker_client }}" = "gcp" ]; then
            export PUBSUB_EMULATOR_HOST=localhost:8085
            ./MQClient/resources/local-gcp-emulator.sh
          # NATS
          elif [ "${{ matrix.broker_client }}" = "nats" ]; then
            ./MQClient/resources/local-nats-js.sh
          fi

          echo "--------------------------------------------------------------"
          echo "running tests..."

          pip install --upgrade pip wheel setuptools pytest
          export EWMS_PILOT_BROKER_CLIENT=${{ matrix.broker_client }}
          pip install .[test,${{ matrix.broker_client }}]
          python -m pytest -vvv tests -n 10
      - name: broker output
        if: always()
        run: |
          set -x
          cat ./broker.out
          if [ -n "$(ls -A ./broker_logs/ 2>/dev/null)" ]; then
            ls ./broker_logs/
            more ./broker_logs/* | cat  # cats with filenames (delimited by :::::::)
          fi
      - name: broker docker logs
        if: always()
        run: |
          docker logs "${{ matrix.broker_client }}" || true

  release:
    if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
    needs: [py-setup, tests]
    runs-on: ubuntu-latest
    concurrency: release
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    - name: Python Semantic Release
      uses: relekang/python-semantic-release@master
      with:
        github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        repository_username: __token__
        repository_password: ${{ secrets.PYPI_TOKEN }}
