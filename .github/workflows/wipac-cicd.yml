name: wipac ci/cd

on: [ push ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  # don't cancel on main/master/default
  cancel-in-progress: ${{ format('refs/heads/{0}', github.event.repository.default_branch) != github.ref }}

env:
  PULSAR_CONTAINER: pulsar_local
  #
  EWMS_PILOT_QUEUE_INCOMING_BROKER_ADDRESS: localhost
  EWMS_PILOT_TIMEOUT_INCOMING: 1
  #
  EWMS_PILOT_QUEUE_OUTGOING_BROKER_ADDRESS: localhost
  EWMS_PILOT_TIMEOUT_OUTGOING: 1
  #
  DOCKER_IMAGE_NAME: pilot-test/example


jobs:

  #############################################################################
  # PACKAGING & LINTERS
  #############################################################################


  py-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: versions
        uses: WIPACrepo/wipac-dev-py-versions-action@v2.1

  flake8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
      - uses: WIPACrepo/wipac-dev-flake8-action@v1.0

  mypy:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-mypy-action@v2.0

  py-setup:
    runs-on: ubuntu-latest
    steps:
      - if: github.actor != 'dependabot[bot]'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # fyi, dependabot can't access normal secrets
      - if: github.actor != 'dependabot[bot]'
        uses: WIPACrepo/wipac-dev-py-setup-action@v3.0
        with:
          base-keywords: WIPAC IceCube "Observation Management Service" "Event Workflow Management Service"

  py-dependencies:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ github.job }}
      cancel-in-progress: true
    steps:
      - if: github.actor != 'dependabot[bot]'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # fyi, dependabot can't access normal secrets
      - if: github.actor != 'dependabot[bot]'
        uses: WIPACrepo/wipac-dev-py-dependencies-action@v1.0


  ############################################################################
  # TESTS & EXAMPLES
  #############################################################################


  test-build-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile_example
          cache-from: type=gha
          cache-to: type=gha,mode=min
          tags: ${{ env.DOCKER_IMAGE_NAME }}:local

  test-build-singularity:
    needs: test-build-docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile_example
          cache-from: type=gha
          # cache-to: type=gha,mode=min
          tags: ${{ env.DOCKER_IMAGE_NAME }}:local
          load: true
      - uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: 1.3.2
      - name: build singularity image
        run: |
          sudo singularity build $(basename ${{ env.DOCKER_IMAGE_NAME }}).sif docker-daemon://${{ env.DOCKER_IMAGE_NAME }}:local
          ls -lh $(basename ${{ env.DOCKER_IMAGE_NAME }}).sif
      - name: run singularity container
        run: |
          singularity run $(basename ${{ env.DOCKER_IMAGE_NAME }}).sif \
            ls

  examples:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        broker_client: [ pulsar, rabbitmq, nats ]
    steps:
      - uses: actions/checkout@v4
      - name: Checkout MQClient repo
        uses: actions/checkout@v4
        with:
          repository: Observation-Management-Service/MQClient
          path: MQClient
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: run
        run: |
          set -x

          # Pulsar
          if [ "${{ matrix.broker_client }}" = "pulsar" ]; then
            ./MQClient/resources/docker-pulsar.sh "${{ matrix.broker_client }}"
          # RabbitMQ
          elif [ "${{ matrix.broker_client }}" = "rabbitmq" ]; then
            ./MQClient/resources/docker-rabbitmq.sh "${{ matrix.broker_client }}"
          # NATS
          elif [ "${{ matrix.broker_client }}" = "nats" ]; then
            ./MQClient/resources/local-nats-js.sh
          fi

          echo "--------------------------------------------------------------"
          echo "running examples..."

          pip install --upgrade pip wheel setuptools pytest
          export EWMS_PILOT_QUEUE_INCOMING_BROKER_TYPE=${{ matrix.broker_client }}
          export EWMS_PILOT_QUEUE_OUTGOING_BROKER_TYPE=${{ matrix.broker_client }}
          pip install .[test,${{ matrix.broker_client }}]

          export EWMS_PILOT_QUEUE_INCOMING="a012"
          export EWMS_PILOT_QUEUE_OUTGOING="b345"
          python examples/do_task.py

          # read messages
          out=$(python -c '
          import mqclient as mq
          import os, asyncio
          queue = mq.Queue(
              os.environ["EWMS_PILOT_QUEUE_OUTGOING_BROKER_TYPE"],
              address=os.environ["EWMS_PILOT_QUEUE_OUTGOING_BROKER_ADDRESS"],
              name="b345",
          )
          async def go():
            async with queue.open_sub() as sub:
                async for msg in sub:
                    print(msg)
          asyncio.run(go())
          ')
          echo "$out"

          if [ -z "$out" ]; then
            echo "no messages"
          fi

      - name: broker output
        if: always()
        run: |
          set -x
          cat ./broker.out
          if [ -n "$(ls -A ./broker_logs/ 2>/dev/null)" ]; then
            ls ./broker_logs/
            more ./broker_logs/* | cat  # cats with filenames (delimited by :::::::)
          fi
      - name: broker docker logs
        if: always()
        run: |
          docker logs "${{ matrix.broker_client }}" || true

  tests:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
        broker_client: [ pulsar, rabbitmq, nats ]
    steps:
      - uses: actions/checkout@v4
      - name: Checkout MQClient repo
        uses: actions/checkout@v4
        with:
          repository: Observation-Management-Service/MQClient
          path: MQClient
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.version }}
      - name: pre-pull images for testing
        run: |
          docker pull python:alpine
      - name: Integrate
        run: |
          set -x

          # Pulsar
          if [ "${{ matrix.broker_client }}" = "pulsar" ]; then
            ./MQClient/resources/docker-pulsar.sh "${{ matrix.broker_client }}"
          # RabbitMQ
          elif [ "${{ matrix.broker_client }}" = "rabbitmq" ]; then
            ./MQClient/resources/docker-rabbitmq.sh "${{ matrix.broker_client }}"
          # NATS
          elif [ "${{ matrix.broker_client }}" = "nats" ]; then
            ./MQClient/resources/local-nats-js.sh
          fi

          echo "--------------------------------------------------------------"
          echo "running tests..."

          pip install --upgrade pip wheel setuptools pytest
          export EWMS_PILOT_QUEUE_INCOMING_BROKER_TYPE=${{ matrix.broker_client }}
          export EWMS_PILOT_QUEUE_OUTGOING_BROKER_TYPE=${{ matrix.broker_client }}
          pip install .[test,${{ matrix.broker_client }}]

          # iterate each test, starting each in a container
          # https://superuser.com/a/284226
          while IFS= read -r test || [[ -n $test ]]; do
              echo "$test"
              docker run --rm -i --network="host" \
                  --mount type=bind,source=$(pwd),target=/repo/,readonly \
                  $(env | grep '^EWMS_' | awk '$0="--env "$0') \
                  python:alpine \
                  pytest /repo/tests -k "$line"
          done < <(printf '%s' "$(pytest --collect-only -q --disable-warnings tests | head -n -2)")
          
          exit 0  # TODO 

          if [ "${{ matrix.broker_client }}" = "pulsar" ]; then
            # occasionally has connection errors
            python -m pytest -vvv tests --retries 3 --retry-delay 5 --exitfirst  -n 32
          else
            python -m pytest -vvv tests --exitfirst  -n 32
          fi

      - name: broker output
        if: always()
        run: |
          set -x
          cat ./broker.out
          if [ -n "$(ls -A ./broker_logs/ 2>/dev/null)" ]; then
            ls ./broker_logs/
            more ./broker_logs/* | cat  # cats with filenames (delimited by :::::::)
          fi
      - name: broker docker logs
        if: always()
        run: |
          docker logs "${{ matrix.broker_client }}" || true


  #############################################################################
  # GITHUB & PYPI RELEASE
  #############################################################################


  release:
    if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
    needs: [
      py-versions,
      flake8,
      mypy,
      py-setup,
      py-dependencies,
      test-build-docker,
      test-build-singularity,
      examples,
      tests
    ]
    runs-on: ubuntu-latest
    concurrency: release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Python Semantic Release
        uses: python-semantic-release/python-semantic-release@v7.34.6
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          repository_username: __token__
          repository_password: ${{ secrets.PYPI_TOKEN }}
