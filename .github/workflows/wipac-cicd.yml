name: wipac ci/cd

on: [ push ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  # don't cancel on main/master/default
  cancel-in-progress: ${{ format('refs/heads/{0}', github.event.repository.default_branch) != github.ref }}

env:
  RABBITMQ_IMAGE_TAG: bitnami/rabbitmq:3.13.5
  PULSAR_IMAGE_TAG: apachepulsar/pulsar:2.6.0
  NATS_IMAGE_TAG: nats:2.10.18
  #
  SORTED_LIST_OF_TESTS_FILE: list-of-tests-sorted.txt
  #
  BROKER_CONTAINER_NAME: thebroker
  #
  EWMS_PILOT_TIMEOUT_INCOMING: 1
  EWMS_PILOT_TIMEOUT_OUTGOING: 1
  EWMS_PILOT_KEEP_ALL_TASK_FILES: True
  #
  DOCKER_IMAGE_NAME: pilot/local


jobs:

  #############################################################################
  # PACKAGING & LINTERS
  #############################################################################


  py-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: versions
        uses: WIPACrepo/wipac-dev-py-versions-action@v2.4

  flake8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
      - uses: WIPACrepo/wipac-dev-flake8-action@v1.0

  mypy:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-mypy-action@v2.0

  py-setup:
    runs-on: ubuntu-latest
    steps:
      - if: github.actor != 'dependabot[bot]'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # fyi, dependabot can't access normal secrets
      - if: github.actor != 'dependabot[bot]'
        uses: WIPACrepo/wipac-dev-py-setup-action@v4.1
        with:
          python_min: 3.9
          keywords: pilot "Observation Management Service" "Event Workflow Management Service" EWMS "message passing" MQ task
          pypi_name: ewms-pilot
          author: WIPAC Developers
          author_email: developers@icecube.wisc.edu

  py-dependencies:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ github.job }}
      cancel-in-progress: true
    steps:
      - if: github.actor != 'dependabot[bot]'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # fyi, dependabot can't access normal secrets
      - if: github.actor != 'dependabot[bot]'
        run: |
          set -x
          
          mkdir docker-build-logs/ && trap 'rm -rf docker-build-logs/' EXIT
          
          # first, build the vanilla/default image
          docker build --tag "default:py-dep-this" . \
              >> docker-build-logs/$tag.docker-build.out 2>&1 & pidlist="$pidlist $!"
          
          # build all dockerfiles
          for py in $(echo ${{ needs.py-versions.outputs.matrix }} | sed 's/[][]//g; s/,/ /g'); do
              docker pull python:$py  # pre-pull to speed up dependent images
              for flavor in rabbitmq pulsar nats; do
                    # normal
                    tag="$py-$flavor:py-dep-this"
                    docker build --tag $tag \
                        --build-arg="PYTHON=$py" --build-arg="FLAVOR=$flavor" \
                        . \
                        >> docker-build-logs/$tag.docker-build.out 2>&1 & pidlist="$pidlist $!"
                    sleep .1  # little sleep to help logs
                    # another with 'tests'
                    tag="$py-$flavor-test:py-dep-this"
                    docker build --tag $tag \
                        --build-arg="PYTHON=$py" --build-arg="FLAVOR=$flavor,test" \
                        . \
                        >> docker-build-logs/$tag.docker-build.out 2>&1 & pidlist="$pidlist $!"
                    sleep .1  # little sleep to help logs
              done
          done
          
          # wait for all them
          for pid in $pidlist; do
              sleep .1  # little sleep to help logs
              echo "waiting for $pid..."
              if ! wait -n $pid; then
                  sleep 5  # may need to wait for file to be written
                  kill $pidlist 2>/dev/null
                  sleep 5
                  more docker-build-logs/* | cat  # cats with filenames (delimited by :::::::)
                  exit 1
              fi
          done
          
          docker system prune --force  # save disk space

      - if: github.actor != 'dependabot[bot]'
        uses: WIPACrepo/wipac-dev-py-dependencies-action@v2.0
        with:
          use_directory: true


  ############################################################################
  # tests
  #############################################################################


  test-build-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=min
          tags: ${{ env.DOCKER_IMAGE_NAME }}:local

  test-run-apptainer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: 1.3.2
      - name: build apptainer image
        run: |
          docker build --tag ${{ env.DOCKER_IMAGE_NAME }} \
              --build-arg="FLAVOR=rabbitmq,test" \
              --build-arg="CONTAINER_PLATFORM=apptainer" \
              .
          apptainer build $(basename ${{ env.DOCKER_IMAGE_NAME }}).sif docker-daemon://${{ env.DOCKER_IMAGE_NAME }}:local
          ls -lh $(basename ${{ env.DOCKER_IMAGE_NAME }}).sif
      - name: Integrate
        run: |
          # startup broker
          source ./tests/run-broker.sh rabbitmq $BROKER_CONTAINER_NAME \
              "--network=host"
          
          # set queue env vars
          export EWMS_PILOT_QUEUE_INCOMING_BROKER_ADDRESS="$BROKER_CONTAINER_NAME"
          export EWMS_PILOT_QUEUE_OUTGOING_BROKER_ADDRESS="$BROKER_CONTAINER_NAME"
          export EWMS_PILOT_QUEUE_INCOMING_BROKER_TYPE=rabbitmq
          export EWMS_PILOT_QUEUE_OUTGOING_BROKER_TYPE=rabbitmq
          export _EWMS_PILOT_CONTAINER_PLATFORM=apptainer
          
          apptainer run \
              --writable-tmpfs \
              $(env | grep '^EWMS_' | awk '$0="--env "$0') \
              $(basename ${{ env.DOCKER_IMAGE_NAME }}).sif \
              /bin/bash -c "pip install pytest && pytest -vvv tests/test_pilot.py::test_000"

  test-run-docker:
    needs: [ py-versions ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
        broker_client: [ pulsar, rabbitmq, nats ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.version }}
      - name: install sysbox (needed for docker-in-docker)
        run: |
          temp_dir=$(mktemp -d) && cd $temp_dir && trap 'rm -rf $temp_dir' EXIT  # save disk space
          # https://github.com/nestybox/sysbox/blob/master/docs/user-guide/install-package.md
          wget https://downloads.nestybox.com/sysbox/releases/v0.6.4/sysbox-ce_0.6.4-0.linux_amd64.deb
          docker rm $(docker ps -a -q) -f  ||  echo "ok: no docker containers to remove"
          sudo apt-get install jq
          sudo apt-get install ./sysbox-ce_0.6.4-0.linux_amd64.deb
          # sudo systemctl status sysbox -n20  # used below
      - name: pre-pull/build images for testing
        run: |
          set -x
          mkdir saved-images/
          docker pull python:alpine && docker save -o saved-images/python-alpine.tar python:alpine
          docker build --tag ${{ env.DOCKER_IMAGE_NAME }} \
              --build-arg="PYTHON=${{ matrix.version }}" \
              --build-arg="FLAVOR=${{ matrix.broker_client }},test" \
              .
      - name: get list of pytest tests
        run: |
          pip install .[test]  # for the for-loop below
          pytest --collect-only -q --disable-warnings tests | head -n -2 > $SORTED_LIST_OF_TESTS_FILE
      - run: |
          # create common network -- https://github.com/nestybox/sysbox/blob/master/docs/quickstart/kind.md#k8s-cluster-on-user-defined-bridge-networks
          docker network create mynet
      - name: Integrate
        run: |
          set -x
          
          # activate sysbox -- https://github.com/nestybox/sysbox/blob/master/docs/user-guide/install-package.md
          sudo systemctl status sysbox -n20
          
          # startup broker
          source ./tests/run-broker.sh "${{ matrix.broker_client }}" $BROKER_CONTAINER_NAME \
              "--net=mynet --runtime=sysbox-runc"
          docker ps
          
          set +x  # lots of output in these loops
          echo "--------------------------------------------------------------"
          echo "running tests..."
          
          # set queue env vars
          export EWMS_PILOT_QUEUE_INCOMING_BROKER_ADDRESS="$BROKER_CONTAINER_NAME"
          export EWMS_PILOT_QUEUE_OUTGOING_BROKER_ADDRESS="$BROKER_CONTAINER_NAME"
          export EWMS_PILOT_QUEUE_INCOMING_BROKER_TYPE=${{ matrix.broker_client }}
          export EWMS_PILOT_QUEUE_OUTGOING_BROKER_TYPE=${{ matrix.broker_client }}
          
          # make external directories -- used in like 1 test
          export EWMS_PILOT_EXTERNAL_DIRECTORIES="/cvmfs/dummy-1/dir-A,/cvmfs/dummy-2/dir-B"
          mkdir -p $(pwd)/cvmfs/dummy-1/dir-A
          echo "alpha" > $(pwd)/cvmfs/dummy-1/dir-A/file.txt
          mkdir -p $(pwd)/cvmfs/dummy-2/dir-B
          echo "beta" > $(pwd)/cvmfs/dummy-2/dir-B/file.txt

          # iterate each test, starting each in its own container
          cat $SORTED_LIST_OF_TESTS_FILE
          while read test; do
              echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
              echo "starting test $test"
              echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
          
              set -x  # lets see the command
              docker run --rm \
                  --net=mynet \
                  --runtime=sysbox-runc \
                  --hostname=syscont \
                  --mount type=bind,source=$(pwd),target=/repo/,readonly \
                  --mount type=bind,source=$(pwd)/saved-images,target=/saved-images/ \
                  --mount type=bind,source=$(pwd)/cvmfs/dummy-1/dir-A,target=/cvmfs/dummy-1/dir-A,readonly \
                  --mount type=bind,source=$(pwd)/cvmfs/dummy-2/dir-B,target=/cvmfs/dummy-2/dir-B,readonly \
                  $(env | grep '^EWMS_' | awk '$0="--env "$0') \
                  ${{ env.DOCKER_IMAGE_NAME }} /bin/bash -c "docker load -i /saved-images/python-alpine.tar && pytest -vvv $test --retries 1 --retry-delay 5" \
                  >> $(basename $test).test.out 2>&1 & pidlist="$pidlist $!"
              sleep .1  # little sleep to help logs
              sleep 5  # sleep so the broker doesn't get overwhelmed
              set +x
              cat $(basename $test).test.out  # get a preview of the test output
              sleep .1  # little sleep to help logs
          done < $SORTED_LIST_OF_TESTS_FILE
          
          # wait for tests to finish
          # https://stackoverflow.com/a/32604828/13156561
          sleep 3  # short sleep to help logs
          for pid in $pidlist; do
              date --rfc-3339=seconds
              echo "waiting for $pid..."
              if ! wait -n $pid; then
                  echo "ERROR: test(s) failed"
                  sleep 5  # may need to wait for output files to be written
                  kill $pidlist 2>/dev/null
                  exit 1
              fi
              echo "-> PASSED"
          done

      - name: pytest first failure
        if: always()
        run: |
          cat $( grep -l -m 1 *.test.out -e "= FAILURES =" | head -1 ) || echo "not found"

      - name: pytest container outputs
        if: always()
        run: |
          cat $SORTED_LIST_OF_TESTS_FILE
          while read test; do
              echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
              echo $test
              echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
              cat $(basename $test).test.out || true
          done < $SORTED_LIST_OF_TESTS_FILE
      - name: broker output
        if: always()
        run: |
          set -x
          cat ./broker.out
          if [ -n "$(ls -A ./broker_logs/ 2>/dev/null)" ]; then
            ls ./broker_logs/
            more ./broker_logs/* | cat  # cats with filenames (delimited by :::::::)
          fi
      - name: broker docker logs
        if: always()
        run: |
          docker logs $BROKER_CONTAINER_NAME || true


  #############################################################################
  # GITHUB & PYPI RELEASE
  #############################################################################


  release:
    # only run on main/master/default
    if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
    needs: [
      py-versions,
      flake8,
      mypy,
      py-setup,
      py-dependencies,
      test-build-docker,
      test-run-apptainer,
      test-run-docker
    ]
    runs-on: ubuntu-latest
    concurrency: release  # prevent any possible race conditions
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # using 'GITHUB_TOKEN' does not trigger ci on push
      # Python-Package Version Bump
      - uses: python-semantic-release/python-semantic-release@v9.8.1
        id: psr-psr
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # using 'GITHUB_TOKEN' does not trigger ci on push
      # PyPI Release
      - uses: pypa/gh-action-pypi-publish@v1.8.14
        if: steps.psr-psr.outputs.released == 'true'
        with:
          password: ${{ secrets.PYPI_TOKEN }}
      # GitHub Release
      - uses: python-semantic-release/upload-to-gh-release@v9.8.1
        if: steps.psr-psr.outputs.released == 'true'
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # using 'GITHUB_TOKEN' does not trigger ci on push
