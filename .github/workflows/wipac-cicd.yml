name: wipac ci/cd

on: [push]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  # don't cancel on main/master/default
  cancel-in-progress: ${{ format('refs/heads/{0}', github.event.repository.default_branch) != github.ref }}

env:
  PULSAR_CONTAINER: pulsar_local
  EWMS_PILOT_BROKER_ADDRESS: localhost
  EWMS_PILOT_TIMEOUT_INCOMING: 1
  EWMS_PILOT_TIMEOUT_OUTGOING: 1



jobs:


  #############################################################################
  # PACKAGING & LINTERS
  #############################################################################


  py-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: versions
        uses: WIPACrepo/wipac-dev-py-versions-action@v2.2

  flake8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
      - uses: WIPACrepo/wipac-dev-flake8-action@v1.0

  mypy:
    needs: [py-versions]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py3: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.py3 }}
      - uses: WIPACrepo/wipac-dev-mypy-action@v2.0

  ######################################################################################

  writable-branch-detect:
    runs-on: ubuntu-latest
    outputs:
      OKAY: ${{ steps.detect.outputs.OKAY }}
    steps:
      - name: is this a non-dependabot branch?
        id: detect
        # dependabot can't access normal secrets
        #   & don't run non-branch triggers (like tags)
        run: |
          if [[ \
              ${{github.actor}} != 'dependabot[bot]' && \
              ${{github.ref_type}} == 'branch'
          ]]; then
            echo "OKAY=true" >> "$GITHUB_OUTPUT"
            echo "yes, this branch is compatible"
          else
            echo "OKAY=false" >> "$GITHUB_OUTPUT"
            echo "no, this branch is incompatible"
          fi

  py-setup:
    needs: [writable-branch-detect]
    runs-on: ubuntu-latest
    steps:
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: WIPACrepo/wipac-dev-py-setup-action@v3.1
        with:
          base-keywords: WIPAC IceCube "Observation Management Service" "Event Workflow Management Service"

  py-dependencies:
    needs: [writable-branch-detect]
    runs-on: ubuntu-latest
    steps:
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - if: needs.writable-branch-detect.outputs.OKAY == 'true'
        uses: WIPACrepo/wipac-dev-py-dependencies-action@v1.1


  #############################################################################
  # TESTS
  #############################################################################


  examples:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        broker_client: [pulsar, rabbitmq, nats]
    steps:
      - uses: actions/checkout@v3
      - name: Checkout MQClient repo
        uses: actions/checkout@v3
        with:
          repository: Observation-Management-Service/MQClient
          path: MQClient
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: run
        run: |
          set -x

          # Pulsar
          if [ "${{ matrix.broker_client }}" = "pulsar" ]; then
            ./MQClient/resources/docker-pulsar.sh "${{ matrix.broker_client }}"
          # RabbitMQ
          elif [ "${{ matrix.broker_client }}" = "rabbitmq" ]; then
            ./MQClient/resources/docker-rabbitmq.sh "${{ matrix.broker_client }}"
          # NATS
          elif [ "${{ matrix.broker_client }}" = "nats" ]; then
            ./MQClient/resources/local-nats-js.sh
          fi

          echo "--------------------------------------------------------------"
          echo "running examples..."

          export EWMS_PILOT_BROKER_CLIENT=${{ matrix.broker_client }}
          ls
          ls ${{ github.workspace }}
          docker build --tag local/prealpha ${{ github.workspace }}/Dockerfile_${{ matrix.broker_client }}_prealpha
          docker run --network="host" --rm -i \
              $(env | grep '^EWMS_' | awk '$0="--env "$0') \
              local/prealpha

      - name: broker output
        if: always()
        run: |
          set -x
          cat ./broker.out
          if [ -n "$(ls -A ./broker_logs/ 2>/dev/null)" ]; then
            ls ./broker_logs/
            more ./broker_logs/* | cat  # cats with filenames (delimited by :::::::)
          fi
      - name: broker docker logs
        if: always()
        run: |
          docker logs "${{ matrix.broker_client }}" || true

  tests:
    needs: [py-versions]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJSON(needs.py-versions.outputs.matrix) }}
        broker_client: [pulsar, rabbitmq, nats]
    steps:
      - uses: actions/checkout@v3
      - name: Checkout MQClient repo
        uses: actions/checkout@v3
        with:
          repository: Observation-Management-Service/MQClient
          path: MQClient
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.version }}
      - name: Integrate
        run: |
          set -x

          # Pulsar
          if [ "${{ matrix.broker_client }}" = "pulsar" ]; then
            ./MQClient/resources/docker-pulsar.sh "${{ matrix.broker_client }}"
          # RabbitMQ
          elif [ "${{ matrix.broker_client }}" = "rabbitmq" ]; then
            ./MQClient/resources/docker-rabbitmq.sh "${{ matrix.broker_client }}"
          # NATS
          elif [ "${{ matrix.broker_client }}" = "nats" ]; then
            ./MQClient/resources/local-nats-js.sh
          fi

          echo "--------------------------------------------------------------"
          echo "running tests..."

          pip install --upgrade pip wheel setuptools pytest
          export EWMS_PILOT_BROKER_CLIENT=${{ matrix.broker_client }}
          pip install .[test,${{ matrix.broker_client }}]

          if [ "${{ matrix.broker_client }}" = "pulsar" ]; then
            # occasionally has connection errors
            python -m pytest -vvv tests -n 32 --retries 3 --retry-delay 5
          else
            python -m pytest -vvv tests -n 32
          fi

      - name: broker output
        if: always()
        run: |
          set -x
          cat ./broker.out
          if [ -n "$(ls -A ./broker_logs/ 2>/dev/null)" ]; then
            ls ./broker_logs/
            more ./broker_logs/* | cat  # cats with filenames (delimited by :::::::)
          fi
      - name: broker docker logs
        if: always()
        run: |
          docker logs "${{ matrix.broker_client }}" || true


  #############################################################################
  # GITHUB & PYPI RELEASE
  #############################################################################


  release:
    if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
    needs: [flake8, mypy, py-setup, py-dependencies, py-versions, examples, tests]
    runs-on: ubuntu-latest
    concurrency: release
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    - name: Python Semantic Release
      uses: python-semantic-release/python-semantic-release@v7.34.6
      with:
        github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        repository_username: __token__
        repository_password: ${{ secrets.PYPI_TOKEN }}
